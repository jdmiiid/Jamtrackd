// This file is "album_rating.dart"
// to compile these, run the following:
// flutter pub run build_runner build --delete-conflicting-outputs
// per: https://firebase.google.com/docs/firestore/manage-data/add-data#dart
// per: https://pub.dev/packages/freezed
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:tasktrack/models/post.dart';

// import '../json_converters/firestore_timestamp_json_converter.dart';

// required: associates our `album_rating.dart` with the code generated by Freezed
part 'album_rating.freezed.dart';

// optional: Since our AlbumRating class is serializable, we must add this line.
// But if AlbumRating was not serializable, we could skip it.
part 'album_rating.g.dart';

@freezed
class AlbumRating with _$AlbumRating {
  const AlbumRating._();

  factory AlbumRating({
    required String artistName,
    required String albumName,
    required String? title,
    required double rating,
    required String response,
    required String url,
    required String releaseDate,
    required String favoriteTrack,
  }) = _AlbumRating;

  factory AlbumRating.fromJson(json) => _$AlbumRatingFromJson(json);

  factory AlbumRating.fromFirestore(documentSnapshot, shapshotOptions) =>
      AlbumRating.fromJson(documentSnapshot.data()!);

  static Map<String, Object?> toFirestore(albumRating, setOptions) =>
      albumRating.toJson();

  // this returns a docId without writing anything to the database yet
  // later, we can use this id to write to the database with the next call:
  // createFirestoreDoc
  static String autoGeneratedDocId() {
    return FirebaseFirestore.instance.collection('albumRating').doc().id;
  }

  // READ
  static Future<DocumentSnapshot<AlbumRating>> readFirestoreDoc(
      {required String docId}) async {
    final firestoreCollection = FirebaseFirestore.instance
        .collection('albumRating')
        .withConverter<AlbumRating>(
          fromFirestore: AlbumRating.fromFirestore,
          toFirestore: AlbumRating.toFirestore,
        );
    return await firestoreCollection.doc(docId).get();
  }

  // UPDATE
  static Future<DocumentReference<AlbumRating>> updateFirestoreDoc(
      {required String docId, required AlbumRating albumRating}) async {
    final firestoreCollection = FirebaseFirestore.instance
        .collection('albumRating')
        .withConverter<AlbumRating>(
          fromFirestore: AlbumRating.fromFirestore,
          toFirestore: AlbumRating.toFirestore,
        );
    await firestoreCollection.doc(docId).update(albumRating.toJson());
    return firestoreCollection.doc(docId);
  }
}
